generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/natures_way_soil_website/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  role          String    @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  products    Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String        @id @default(cuid())
  name           String
  slug           String        @unique
  description    String
  price          Decimal       @db.Decimal(10, 2)
  compareAtPrice Decimal?      @db.Decimal(10, 2)
  categoryId     String
  category       Category      @relation(fields: [categoryId], references: [id])
  type           String
  benefits       String[]
  usage          String[]
  ingredients    String
  applicationRate String
  npkRatio       String?
  size           String
  seoKeywords    String[]
  image          String?
  isActive       Boolean       @default(true)
  inventory      Int           @default(0)
  orderItems     OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                String        @id @default(cuid())
  userId            String?
  user              User?         @relation(fields: [userId], references: [id])
  status            OrderStatus   @default(PENDING)
  total             Decimal       @db.Decimal(10, 2)
  subtotal          Decimal       @db.Decimal(10, 2)
  tax               Decimal       @db.Decimal(10, 2)
  shipping          Decimal       @db.Decimal(10, 2)
  isGuestOrder      Boolean       @default(false)
  
  // Shipping Information
  shippingEmail     String
  shippingFirstName String
  shippingLastName  String
  shippingAddress   String
  shippingApartment String?
  shippingCity      String
  shippingState     String
  shippingZipCode   String
  shippingPhone     String
  
  // Billing Information
  billingEmail      String
  billingFirstName  String
  billingLastName   String
  billingAddress    String
  billingApartment  String?
  billingCity       String
  billingState      String
  billingZipCode    String
  billingPhone      String
  
  // Payment Information
  paymentId         String?
  paymentMethod     String?
  paymentStatus     PaymentStatus @default(PENDING)
  
  items             OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([isGuestOrder])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orderId])
  @@index([productId])
}

model ContactForm {
  id         String   @id @default(cuid())
  name       String
  email      String
  subject    String?
  message    String
  status     String   @default("NEW")
  formType   String   @default("CONTACT")
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([status])
  @@index([formType])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
